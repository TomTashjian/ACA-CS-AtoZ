Zoo Animals:
At a zoo, each enclosure holds different animals (attractions).
IEnumerable acts like a zookeeper who introduces you to one animal at a time (using an IEnumerator).
You observe each animal (access its properties) without overcrowding the entire zoo.

Library Bookshelf:
Imagine a library with many bookshelves. Each bookshelf contains books (our attractions).
The entire library represents a collection of attractions.
IEnumerable is like a librarian who hands you one book at a time (using an IEnumerator).
You can read each book (access its content) without loading the entire library into memory.

Traveling by Train Stops:
Consider a train route with multiple stops (attractions).
IEnumerable is your train ticket, allowing you to travel from one stop to the next.
At each station (iteration), you explore the surroundings (access details) without knowing the entire route upfront.

Task: City Attractions Enumerator
Background:
Imagine you’re building a city guide app. Each city has attractions (e.g., museums, parks, restaurants).
You want to create an efficient way to iterate through these attractions without loading them all into memory at once(get it by one at each itaration).
Instructions:
Implement an Attraction class with properties like Name, Description, and Category.
Create a CityAttractions class that implements IEnumerable<Attraction>.
The CityAttractions class should have an internal list of attractions.
When iterating through the city attractions, it should provide one attraction at a time (like turning pages in a guidebook).
Implement the necessary methods to support iteration (hint: GetEnumerator()).
Task:
Write a C# program that demonstrates the usage of your CityAttractions class.
Add a few attractions to the list (e.g., “Central Park,” “Metropolitan Museum of Art,” “Times Square”).
Iterate through the attractions and print their names and descriptions.
Bonus:
Implement a custom enumerator (class) that adheres to the IEnumerator<Attraction> interface.
Handle edge cases (e.g., resetting the enumerator).